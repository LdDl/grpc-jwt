// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: server_example.proto

package main

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerExample_GetHiddenData_FullMethodName       = "/server_example.ServerExample/GetHiddenData"
	ServerExample_GetHiddenStreamData_FullMethodName = "/server_example.ServerExample/GetHiddenStreamData"
	ServerExample_GetPublicData_FullMethodName       = "/server_example.ServerExample/GetPublicData"
)

// ServerExampleClient is the client API for ServerExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerExampleClient interface {
	GetHiddenData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*HiddenData, error)
	GetHiddenStreamData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HiddenData], error)
	GetPublicData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*PublicData, error)
}

type serverExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewServerExampleClient(cc grpc.ClientConnInterface) ServerExampleClient {
	return &serverExampleClient{cc}
}

func (c *serverExampleClient) GetHiddenData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*HiddenData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HiddenData)
	err := c.cc.Invoke(ctx, ServerExample_GetHiddenData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverExampleClient) GetHiddenStreamData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HiddenData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServerExample_ServiceDesc.Streams[0], ServerExample_GetHiddenStreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NoArguments, HiddenData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerExample_GetHiddenStreamDataClient = grpc.ServerStreamingClient[HiddenData]

func (c *serverExampleClient) GetPublicData(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*PublicData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicData)
	err := c.cc.Invoke(ctx, ServerExample_GetPublicData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerExampleServer is the server API for ServerExample service.
// All implementations must embed UnimplementedServerExampleServer
// for forward compatibility.
type ServerExampleServer interface {
	GetHiddenData(context.Context, *NoArguments) (*HiddenData, error)
	GetHiddenStreamData(*NoArguments, grpc.ServerStreamingServer[HiddenData]) error
	GetPublicData(context.Context, *NoArguments) (*PublicData, error)
	mustEmbedUnimplementedServerExampleServer()
}

// UnimplementedServerExampleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerExampleServer struct{}

func (UnimplementedServerExampleServer) GetHiddenData(context.Context, *NoArguments) (*HiddenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHiddenData not implemented")
}
func (UnimplementedServerExampleServer) GetHiddenStreamData(*NoArguments, grpc.ServerStreamingServer[HiddenData]) error {
	return status.Errorf(codes.Unimplemented, "method GetHiddenStreamData not implemented")
}
func (UnimplementedServerExampleServer) GetPublicData(context.Context, *NoArguments) (*PublicData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicData not implemented")
}
func (UnimplementedServerExampleServer) mustEmbedUnimplementedServerExampleServer() {}
func (UnimplementedServerExampleServer) testEmbeddedByValue()                       {}

// UnsafeServerExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerExampleServer will
// result in compilation errors.
type UnsafeServerExampleServer interface {
	mustEmbedUnimplementedServerExampleServer()
}

func RegisterServerExampleServer(s grpc.ServiceRegistrar, srv ServerExampleServer) {
	// If the following call pancis, it indicates UnimplementedServerExampleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerExample_ServiceDesc, srv)
}

func _ServerExample_GetHiddenData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerExampleServer).GetHiddenData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerExample_GetHiddenData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerExampleServer).GetHiddenData(ctx, req.(*NoArguments))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerExample_GetHiddenStreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoArguments)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerExampleServer).GetHiddenStreamData(m, &grpc.GenericServerStream[NoArguments, HiddenData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServerExample_GetHiddenStreamDataServer = grpc.ServerStreamingServer[HiddenData]

func _ServerExample_GetPublicData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerExampleServer).GetPublicData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerExample_GetPublicData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerExampleServer).GetPublicData(ctx, req.(*NoArguments))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerExample_ServiceDesc is the grpc.ServiceDesc for ServerExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_example.ServerExample",
	HandlerType: (*ServerExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHiddenData",
			Handler:    _ServerExample_GetHiddenData_Handler,
		},
		{
			MethodName: "GetPublicData",
			Handler:    _ServerExample_GetPublicData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHiddenStreamData",
			Handler:       _ServerExample_GetHiddenStreamData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_example.proto",
}
