// Code generated by protoc-gen-go. DO NOT EDIT.
// source: jwt.proto

/*
Package grpcjwt is a generated protocol buffer package.

It is generated from these files:
	jwt.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	NoArguments
	RefreshTokenResponse
*/
package grpcjwt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Expire uint64 `protobuf:"varint,3,opt,name=expire" json:"expire,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type NoArguments struct {
}

func (m *NoArguments) Reset()                    { *m = NoArguments{} }
func (m *NoArguments) String() string            { return proto.CompactTextString(m) }
func (*NoArguments) ProtoMessage()               {}
func (*NoArguments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RefreshTokenResponse struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Expire uint64 `protobuf:"varint,3,opt,name=expire" json:"expire,omitempty"`
}

func (m *RefreshTokenResponse) Reset()                    { *m = RefreshTokenResponse{} }
func (m *RefreshTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshTokenResponse) ProtoMessage()               {}
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RefreshTokenResponse) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RefreshTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RefreshTokenResponse) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "grpcjwt.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "grpcjwt.LoginResponse")
	proto.RegisterType((*NoArguments)(nil), "grpcjwt.NoArguments")
	proto.RegisterType((*RefreshTokenResponse)(nil), "grpcjwt.RefreshTokenResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for JWTService service

type JWTServiceClient interface {
	LoginHandler(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
}

type jWTServiceClient struct {
	cc *grpc.ClientConn
}

func NewJWTServiceClient(cc *grpc.ClientConn) JWTServiceClient {
	return &jWTServiceClient{cc}
}

func (c *jWTServiceClient) LoginHandler(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/grpcjwt.JWTService/LoginHandler", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTServiceClient) RefreshToken(ctx context.Context, in *NoArguments, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := grpc.Invoke(ctx, "/grpcjwt.JWTService/RefreshToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JWTService service

type JWTServiceServer interface {
	LoginHandler(context.Context, *LoginRequest) (*LoginResponse, error)
	RefreshToken(context.Context, *NoArguments) (*RefreshTokenResponse, error)
}

func RegisterJWTServiceServer(s *grpc.Server, srv JWTServiceServer) {
	s.RegisterService(&_JWTService_serviceDesc, srv)
}

func _JWTService_LoginHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServiceServer).LoginHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcjwt.JWTService/LoginHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServiceServer).LoginHandler(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArguments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcjwt.JWTService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServiceServer).RefreshToken(ctx, req.(*NoArguments))
	}
	return interceptor(ctx, in, info, handler)
}

var _JWTService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcjwt.JWTService",
	HandlerType: (*JWTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginHandler",
			Handler:    _JWTService_LoginHandler_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _JWTService_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwt.proto",
}

func init() { proto.RegisterFile("jwt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x1b, 0xad, 0xd5, 0x8e, 0xcd, 0x65, 0x88, 0x25, 0x04, 0x84, 0xb2, 0xa7, 0x9e, 0x72,
	0xd0, 0x07, 0x10, 0x0f, 0x8a, 0x88, 0x08, 0xae, 0x05, 0xbd, 0xc6, 0x64, 0x8c, 0xa9, 0x76, 0x77,
	0x9d, 0xdd, 0x18, 0x1f, 0xc4, 0x07, 0x96, 0x26, 0x6b, 0x08, 0xe2, 0xd1, 0xdb, 0x7e, 0x33, 0x3b,
	0xb3, 0xff, 0xff, 0x2f, 0x4c, 0xd7, 0x8d, 0x4b, 0x0d, 0x6b, 0xa7, 0x71, 0xbf, 0x64, 0x93, 0xaf,
	0x1b, 0x27, 0x2e, 0x61, 0x76, 0xa3, 0xcb, 0x4a, 0x49, 0x7a, 0xaf, 0xc9, 0x3a, 0x4c, 0xe0, 0xa0,
	0xb6, 0xc4, 0x2a, 0xdb, 0x50, 0x1c, 0x2c, 0x82, 0xe5, 0x54, 0xf6, 0xbc, 0xed, 0x99, 0xcc, 0xda,
	0x46, 0x73, 0x11, 0xef, 0x74, 0xbd, 0x1f, 0x16, 0x77, 0x10, 0xfa, 0x3d, 0xd6, 0x68, 0x65, 0x09,
	0x11, 0xc6, 0xb9, 0x2e, 0xba, 0x25, 0xa1, 0x6c, 0xcf, 0x18, 0xc1, 0x9e, 0xd3, 0xaf, 0xa4, 0xfc,
	0x74, 0x07, 0x38, 0x87, 0x09, 0x7d, 0x9a, 0x8a, 0x29, 0xde, 0x5d, 0x04, 0xcb, 0xb1, 0xf4, 0x24,
	0x42, 0x38, 0xbc, 0xd5, 0xe7, 0x5c, 0xd6, 0x1b, 0x52, 0xce, 0x8a, 0x47, 0x88, 0x24, 0x3d, 0x33,
	0xd9, 0x97, 0xd5, 0x76, 0xec, 0xff, 0x1e, 0x3a, 0xf9, 0x0a, 0x00, 0xae, 0x1f, 0x56, 0xf7, 0xc4,
	0x1f, 0x55, 0x4e, 0x78, 0xe6, 0x23, 0xb9, 0xca, 0x54, 0xf1, 0x46, 0x8c, 0x47, 0xa9, 0x0f, 0x2b,
	0x1d, 0x26, 0x95, 0xcc, 0x7f, 0x97, 0x3b, 0x3d, 0x62, 0x84, 0x17, 0x30, 0x1b, 0x2a, 0xc5, 0xa8,
	0xbf, 0x39, 0xf0, 0x93, 0x1c, 0xf7, 0xd5, 0xbf, 0x6c, 0x89, 0xd1, 0xd3, 0xa4, 0xfd, 0xaa, 0xd3,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x0a, 0xa0, 0x92, 0xb7, 0x01, 0x00, 0x00,
}
